package com.xds.project.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xds.project.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property HeadPic = new Property(2, String.class, "headPic", false, "HEAD_PIC");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Age = new Property(5, String.class, "age", false, "AGE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(10, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property Password = new Property(12, String.class, "password", false, "PASSWORD");
        public final static Property Subject = new Property(13, String.class, "subject", false, "SUBJECT");
        public final static Property College = new Property(14, String.class, "college", false, "COLLEGE");
        public final static Property Specialty = new Property(15, String.class, "specialty", false, "SPECIALTY");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"HEAD_PIC\" TEXT," + // 2: headPic
                "\"SEX\" TEXT," + // 3: sex
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"AGE\" TEXT," + // 5: age
                "\"EMAIL\" TEXT," + // 6: email
                "\"ADDRESS\" TEXT," + // 7: address
                "\"PHONE\" TEXT," + // 8: phone
                "\"CREATE_TIME\" TEXT," + // 9: createTime
                "\"UPDATE_TIME\" TEXT," + // 10: updateTime
                "\"TYPE\" TEXT," + // 11: type
                "\"PASSWORD\" TEXT," + // 12: password
                "\"SUBJECT\" TEXT," + // 13: subject
                "\"COLLEGE\" TEXT," + // 14: college
                "\"SPECIALTY\" TEXT);"); // 15: specialty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(3, headPic);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(6, age);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(13, password);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(14, subject);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(15, college);
        }
 
        String specialty = entity.getSpecialty();
        if (specialty != null) {
            stmt.bindString(16, specialty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(3, headPic);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(6, age);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(13, password);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(14, subject);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(15, college);
        }
 
        String specialty = entity.getSpecialty();
        if (specialty != null) {
            stmt.bindString(16, specialty);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headPic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // password
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // subject
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // college
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // specialty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadPic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAge(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPassword(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSubject(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCollege(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSpecialty(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
